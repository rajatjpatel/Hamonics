// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © RozaniGhani-RG
// Credits to Scott M Carney, author of The Harmonic Trader
// Bullish Ideal Gartley   - Page 160
// Bearish Ideal Gartley   - Page 171
// Bullish Ideal Butterfly - Page 194
// Bearish Ideal Butterfly - Page 204

//@version=4
study("Harmonic Pattern Educational Volume 0 (Source Code)", shorttitle = "HPEV0_SC", precision = 4)

// 0. Input
// 1. array
// 2. Ternary conditional operator and variables
// 3. Custom functions
// 4. array and custom functions for table
// 5. Compile custom functions
// 6. Construct

// 0. Input
G0              = " Direction       Pattern"
G1              = "Font Size"
T0              = "Small font size recommended for mobile app or multiple layout"
input_direction = input("Bullish", "", options = ["Bullish", "Bearish"],   inline = "0", group = G0)
input_pattern   = input("Gartley", "", options = ["Gartley", "Butterfly"], inline = "0", group = G0)
input_font      = input("Normal",  "", options = ["Normal", "Small"],                    group = G1, tooltip = T0)

// 1. array
arr_color             = array.new_color(),  arr_color := array.from(color.black, color.teal, color.red)
//                                                                              X      A      B      C      D
arr_float_i_Gartley   = array.new_float(),  arr_float_i_Gartley   := array.from(1.000, 0.000, 0.618, 0.236, 0.886)
arr_float_i_Butterfly = array.new_float(),  arr_float_i_Butterfly := array.from(1.000, 0.000, 0.786, 0.3,   1.27)
//                                                                              XB       AC               BD              XD
arr_label_i_Gartley   = array.new_string(), arr_label_i_Gartley   := array.from("0.618", "0.618;\n0.786", "1.27;\n1.618", "0.886")
arr_label_i_Butterfly = array.new_string(), arr_label_i_Butterfly := array.from("0.786", "0.618;\n0.786", "1.618",        "1.27;\n1.618")
//                                                                              XB        AC              BD              XD
arr_title_table       = array.new_string(), arr_title_table       := array.from("B = XA", "C = AB",       "D = BC",       "D = XA")
arr_dir_i_Gartley     = array.new_float(),  arr_dir_i_Gartley     := array.from(0.809,    0.119,          0.752,          0.943)
arr_dir_i_Butterfly   = array.new_float(),  arr_dir_i_Butterfly   := array.from(0.893,    0.15,           1.028,          1.135)
// 0 - Gartley, 1 - Butterfly
//                                                               0      1
arr_vol0_bull  = array.new_string(), arr_vol0_bull := array.from("160", "194")
arr_vol0_bear  = array.new_string(), arr_vol0_bear := array.from("171", "204")

// 2. Ternary conditional operator and variables
// Ternary conditional operator 
font      = input_font == "Small"          ? size.small              : size.normal
pos0      = input_direction == "Bullish"   ? position.top_right      : position.bottom_right
pos1      = input_direction == "Bullish"   ? position.top_left       : position.bottom_left
col       = input_direction == "Bullish"   ? array.get(arr_color, 1) : array.get(arr_color, 2)
style_0   = input_direction == "Bullish"   ? label.style_label_up    : label.style_label_down
style_1   = input_direction == "Bullish"   ? label.style_label_down  : label.style_label_up
dir       = input_direction == "Bullish"   ? -1                      : 1
dir_title = input_direction == "Bullish"   ? "Bullish"               : "Bearish"
pattern   = input_pattern   == "Butterfly" ? "Butterfly"             : "Gartley"
// variables
cn = color.new(color.blue, 100)
cb = color.black
sc = label.style_label_center

// 3. Custom functions
// Label custom functions
fun_label_XABCD(_arr0) =>
    var label X  = na, label.delete(X),  X  := label.new(x = bar_index[50], y = dir * array.get(_arr0, 0), text = "X",                 color = cn,         textcolor = col, style = style_0, size = size.large)
    var label A  = na, label.delete(A),  A  := label.new(x = bar_index[40], y = dir * array.get(_arr0, 1), text = "A",                 color = cn,         textcolor = col, style = style_1, size = size.large)
    var label B  = na, label.delete(B),  B  := label.new(x = bar_index[30], y = dir * array.get(_arr0, 2), text = "B",                 color = cn,         textcolor = col, style = style_0, size = size.large)
    var label C  = na, label.delete(C),  C  := label.new(x = bar_index[20], y = dir * array.get(_arr0, 3), text = "C",                 color = cn,         textcolor = col, style = style_1, size = size.large)
    var label D  = na, label.delete(D),  D  := label.new(x = bar_index[10], y = dir * array.get(_arr0, 4), text = "D",                 color = cn,         textcolor = col, style = style_0, size = size.large)
fun_label_rng(_arr1, _arr2, _color) =>
    var label XB = na, label.delete(XB), XB := label.new(x = bar_index[40], y = dir * array.get(_arr1, 0), text = array.get(_arr2, 0), color = color.red,  textcolor = cb,  style = sc,      size = size.large)
    var label AC = na, label.delete(AC), AC := label.new(x = bar_index[30], y = dir * array.get(_arr1, 1), text = array.get(_arr2, 1), color = color.red,  textcolor = cb,  style = sc,      size = size.large)
    var label BD = na, label.delete(BD), BD := label.new(x = bar_index[20], y = dir * array.get(_arr1, 2), text = array.get(_arr2, 2), color = color.blue, textcolor = cb,  style = sc,      size = size.large)
    var label XD = na, label.delete(XD), XD := label.new(x = bar_index[30], y = dir * array.get(_arr1, 3), text = array.get(_arr2, 3), color = _color,     textcolor = cb,  style = sc,      size = size.large)
// Line custom functions
fun_line_solid(_arr0) =>
    var line XA = na, line.delete(XA)
    var line AB = na, line.delete(AB)
    var line BC = na, line.delete(BC)
    var line CD = na, line.delete(CD)
    XA := line.new(x1 = bar_index[50], y1 = dir * array.get(_arr0, 0), x2 = bar_index[40], y2 = dir * array.get(_arr0, 1), color = col, width = 4)
    AB := line.new(x1 = bar_index[40], y1 = dir * array.get(_arr0, 1), x2 = bar_index[30], y2 = dir * array.get(_arr0, 2), color = col, width = 4)
    BC := line.new(x1 = bar_index[30], y1 = dir * array.get(_arr0, 2), x2 = bar_index[20], y2 = dir * array.get(_arr0, 3), color = col, width = 4)
    CD := line.new(x1 = bar_index[20], y1 = dir * array.get(_arr0, 3), x2 = bar_index[10], y2 = dir * array.get(_arr0, 4), color = col, width = 4)
fun_line_dot(_arr0) =>
    var line XD = na, line.delete(XD)
    var line AC = na, line.delete(AC)
    var line XB = na, line.delete(XB)
    var line BD = na, line.delete(BD)
    XD := line.new(x1 = bar_index[50], y1 = dir * array.get(_arr0, 0), x2 = bar_index[10], y2 = dir * array.get(_arr0, 4), color = col, style = line.style_dotted)
    AC := line.new(x1 = bar_index[40], y1 = dir * array.get(_arr0, 1), x2 = bar_index[20], y2 = dir * array.get(_arr0, 3), color = col, style = line.style_dotted)
    XB := line.new(x1 = bar_index[50], y1 = dir * array.get(_arr0, 0), x2 = bar_index[30], y2 = dir * array.get(_arr0, 2), color = col, style = line.style_dotted)
    BD := line.new(x1 = bar_index[30], y1 = dir * array.get(_arr0, 2), x2 = bar_index[10], y2 = dir * array.get(_arr0, 4), color = col, style = line.style_dotted)

// 4. array and custom functions for table
table[] arr_table = array.new_table()
fun_table_top()   => table.new(position = position.top_center,  rows = 2, columns = 4, bgcolor = cn)
fun_table_right() => table.new(position = pos0,                 rows = 5, columns = 3, bgcolor = cn, border_color = cn, border_width = 1)
fun_table_left()  => table.new(position = pos1,                 rows = 3, columns = 4, bgcolor = cn, border_color = cn, border_width = 1)

array.push(arr_table, fun_table_top())
array.push(arr_table, fun_table_right())
array.push(arr_table, fun_table_left())

fun_table_title() =>
    table.cell(array.get(arr_table, 0),     0, 0,    bgcolor = cb,           text_size = size.normal, text_color = color.yellow, text = "Harmonic")
    table.cell(array.get(arr_table, 0),     1, 0,    bgcolor = cb,           text_size = size.normal, text_color = color.yellow, text = "Patterns")
    table.cell(array.get(arr_table, 0),     2, 0,    bgcolor = cb,           text_size = size.normal, text_color = color.yellow, text = "Volume 0")
    table.cell(array.get(arr_table, 0),     0, 1,    bgcolor = cb,           text_size = size.normal, text_color = col,          text = dir_title)
    table.cell(array.get(arr_table, 0),     1, 1,    bgcolor = cb,           text_size = size.normal, text_color = color.blue,   text = "Ideal")
    table.cell(array.get(arr_table, 0),     2, 1,    bgcolor = cb,           text_size = size.normal, text_color = color.blue,   text = pattern)
fun_table_rng(_arr2, _col) =>
    table.cell(array.get(arr_table, 1),     0, 0,    bgcolor = cn,           text_size = font,        text_color = color.orange, text = " ")
    table.cell(array.get(arr_table, 1),     0, 1,    bgcolor = color.yellow, text_size = font,        text_color = cb,           text = array.get(arr_title_table, 0))
    table.cell(array.get(arr_table, 1),     0, 2,    bgcolor = color.yellow, text_size = font,        text_color = cb,           text = array.get(arr_title_table, 1))
    table.cell(array.get(arr_table, 1),     0, 3,    bgcolor = color.yellow, text_size = font,        text_color = cb,           text = array.get(arr_title_table, 2))
    table.cell(array.get(arr_table, 1),     0, 4,    bgcolor = color.yellow, text_size = font,        text_color = cb,           text = array.get(arr_title_table, 3))
    table.cell(array.get(arr_table, 1),     1, 0,    bgcolor = cn,           text_size = font,        text_color = cb,           text = " ")
    table.cell(array.get(arr_table, 1),     1, 1,    bgcolor = color.red,    text_size = font,        text_color = cb,           text = array.get(_arr2, 0))
    table.cell(array.get(arr_table, 1),     1, 2,    bgcolor = color.red,    text_size = font,        text_color = cb,           text = array.get(_arr2, 1))
    table.cell(array.get(arr_table, 1),     1, 3,    bgcolor = color.blue,   text_size = font,        text_color = cb,           text = array.get(_arr2, 2))
    table.cell(array.get(arr_table, 1),     1, 4,    bgcolor = _col,         text_size = font,        text_color = cb,           text = array.get(_arr2, 3))
    for _row = 0 to 3
        table.cell(array.get(arr_table, 1), 2, _row, bgcolor = cn,           text_size = font,        text_color = color.orange, text = " ")
fun_table_ref(_id) =>
    table.cell(array.get(arr_table, 2),     0, 0,    bgcolor = cn,           text_size = font,        text_color = color.white, text = "")
    table.cell(array.get(arr_table, 2),     0, 1,    bgcolor = color.black,  text_size = font,        text_color = color.white, text = "Reference")
    table.cell(array.get(arr_table, 2),     1, 1,    bgcolor = color.teal,   text_size = font,        text_color = color.black, text = "Bullish (M)")
    table.cell(array.get(arr_table, 2),     2, 1,    bgcolor = color.red,    text_size = font,        text_color = color.black, text = "Bearish (W)")
    table.cell(array.get(arr_table, 2),     0, 2,    bgcolor = color.black,  text_size = font,        text_color = color.white, text = "Volume 0")
    table.cell(array.get(arr_table, 2),     1, 2,    bgcolor = color.teal,   text_size = font,        text_color = color.black, text = "Page " + array.get(arr_vol0_bull, _id))
    table.cell(array.get(arr_table, 2),     2, 2,    bgcolor = color.red,    text_size = font,        text_color = color.black, text = "Page " + array.get(arr_vol0_bear, _id))

// 5. Compile custom functions
fun_if(_expr, _arr0, _arr1, _arr2, _col, _id) =>
    if input_pattern == _expr
        fun_label_XABCD(_arr0)
        fun_label_rng(  _arr1, _arr2, _col)
        fun_line_solid( _arr0)
        fun_line_dot(   _arr0)
        fun_table_rng(  _arr2, _col)
        fun_table_ref(  _id)

// 6. Construct
fun_table_title()
fun_if("Gartley",   arr_float_i_Gartley,   arr_dir_i_Gartley,   arr_label_i_Gartley,   color.red,  0)
fun_if("Butterfly", arr_float_i_Butterfly, arr_dir_i_Butterfly, arr_label_i_Butterfly, color.blue, 1)

