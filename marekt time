// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© shoonya0000

//@version=5
indicator("ICT Killzones", "ICT", true, max_labels_count = 500, max_lines_count = 500, max_boxes_count = 500)


// ---------------------------------------- Inputs --------------------------------------------------
var g_SETTINGS      = "Settings"
lb_color            = input.color(color.black, "Label Text Color", group = g_SETTINGS)
lb_size             = input.string('Normal', "Label Size", options = ['Auto', 'Tiny', 'Small', 'Normal', 'Large', 'Huge'], group = g_SETTINGS)
tf_limit            = input.timeframe("30", "Timeframe Limit", tooltip = "Drawings will not appear on timeframes greater than or equal to this", group = g_SETTINGS)
gmt_tz              = input.string('GMT-4', "Timezone", options = ['GMT-12','GMT-11','GMT-10','GMT-9','GMT-8','GMT-7','GMT-6','GMT-5','GMT-4','GMT-3','GMT-2','GMT-1','GMT+0','GMT+1','GMT+2','GMT+3','GMT+4','GMT+5','GMT+6','GMT+7','GMT+8','GMT+9','GMT+10','GMT+11','GMT+12','GMT+13','GMT+14'], tooltip = "Note GMT is not adjusted to reflect Daylight Saving Time changes", group = g_SETTINGS)
use_cutoff          = input.bool(true, "Cutoff Time", inline = "CO", tooltip = "When enabled, all highs and lows will stop extending after this time", group = g_SETTINGS)
cutoff              = input.session("1200-1201", "", inline = "CO", group = g_SETTINGS)


var g_KZ            = "Killzones"
show_kz             = input.bool(true, "Show Killzone Boxes", inline = "KZ", group = g_KZ)
show_kz_text        = input.bool(true, "Display Text", inline = "KZ", group = g_KZ)
box_transparency    = input.int(70, "Box Transparency", 0, 100, group = g_KZ)
text_transparency   = input.int(50, "Text Transparency", 0, 100, group = g_KZ)

use_asia            = input.bool(true, "", inline = "ASIA", group = g_KZ)
asia_text           = input.string("Asia", "", inline = "ASIA", group = g_KZ)
asia                = input.session("2000-0000", "", inline = "ASIA", group = g_KZ)
as_color            = input.color(color.blue, "", inline = "ASIA", group = g_KZ)

use_london          = input.bool(true, "", inline = "LONDON", group = g_KZ)
london_text         = input.string("London", "", inline = "LONDON", group = g_KZ)
london              = input.session("0200-0500", "", inline = "LONDON", group = g_KZ)
lo_color            = input.color(color.red, "", inline = "LONDON", group = g_KZ)

use_nyam            = input.bool(true, "", inline = "NYAM", group = g_KZ)
nyam_text           = input.string("NY AM", "", inline = "NYAM", group = g_KZ)
nyam                = input.session("0800-1100", "", inline = "NYAM", group = g_KZ)
na_color            = input.color(#089981, "", inline = "NYAM", group = g_KZ)

use_nylu            = input.bool(true, "", inline = "NYLU", group = g_KZ)
nylu_text           = input.string("NY Lunch", "", inline = "NYLU", group = g_KZ)
nylu                = input.session("1200-1300", "", inline = "NYLU", group = g_KZ)
nl_color            = input.color(color.yellow, "", inline = "NYLU", group = g_KZ)

use_nypm            = input.bool(true, "", inline = "NYPM", group = g_KZ)
nypm_text           = input.string("NY PM", "", inline = "NYPM", group = g_KZ)
nypm                = input.session("1330-1600", "", inline = "NYPM", group = g_KZ)
np_color            = input.color(color.purple, "", inline = "NYPM", group = g_KZ)


var g_LABELS        = "Killzone Pivots"
s_style             = input.string(defval = 'Solid', title = "Style", options = ['Solid', 'Dotted', 'Dashed'], inline = "L_0", group = g_LABELS)
s_width             = input.int(1, "", inline = "L_0", group = g_LABELS)

as_label            = input.bool(true, "", inline = "L_AS", group = g_LABELS)
ash_str             = input.string("AS.H", "", inline = "L_AS", group = g_LABELS)
asl_str             = input.string("AS.L", "", inline = "L_AS", group = g_LABELS)

lo_label            = input.bool(true, "", inline = "L_LO", group = g_LABELS)
loh_str             = input.string("LO.H", "", inline = "L_LO", group = g_LABELS)
lol_str             = input.string("LO.L", "", inline = "L_LO", group = g_LABELS)

na_label            = input.bool(true, "", inline = "L_NA", group = g_LABELS)
nah_str             = input.string("NYAM.H", "", inline = "L_NA", group = g_LABELS)
nal_str             = input.string("NYAM.L", "", inline = "L_NA", group = g_LABELS)

nl_label            = input.bool(true, "", inline = "L_NL", group = g_LABELS)
nlh_str             = input.string("NYL.H", "", inline = "L_NL", group = g_LABELS)
nll_str             = input.string("NYL.L", "", inline = "L_NL", group = g_LABELS)

np_label            = input.bool(true, "", inline = "L_NP", group = g_LABELS)
nph_str             = input.string("NYPM.H", "", inline = "L_NP", group = g_LABELS)
npl_str             = input.string("NYPM.L", "", inline = "L_NP", group = g_LABELS)


var g_OPEN          = "Opening Price"
h_style             = input.string(defval = 'Dotted', title = "Style", options = ['Solid', 'Dotted', 'Dashed'], inline = "H0", group = g_OPEN)
h_width             = input.int(1, "", inline = "H0", group = g_OPEN)

use_h1              = input.bool(true, "", inline = "H1", group = g_OPEN)
h1_text             = input.string("True Open", "", inline = "H1", group = g_OPEN)
h1                  = input.session("0000-0001", "", inline = "H1", group = g_OPEN)
h1_color            = input.color(color.black, "", inline = "H1", group = g_OPEN)

use_h2              = input.bool(true, "", inline = "H2", group = g_OPEN)
h2_text             = input.string("06:00", "", inline = "H2", group = g_OPEN)
h2                  = input.session("0600-0601", "", inline = "H2", group = g_OPEN)
h2_color            = input.color(color.black, "", inline = "H2", group = g_OPEN)

use_h3              = input.bool(true, "", inline = "H3", group = g_OPEN)
h3_text             = input.string("10:00", "", inline = "H3", group = g_OPEN)
h3                  = input.session("1000-1001", "", inline = "H3", group = g_OPEN)
h3_color            = input.color(color.black, "", inline = "H3", group = g_OPEN)

use_h4              = input.bool(true, "", inline = "H4", group = g_OPEN)
h4_text             = input.string("14:00", "", inline = "H4", group = g_OPEN)
h4                  = input.session("1400-1401", "", inline = "H4", group = g_OPEN)
h4_color            = input.color(color.black, "", inline = "H4", group = g_OPEN)


var g_VERTICAL      = "Timestamps"
v_style             = input.string(defval = 'Dotted', title = "Style", options = ['Solid', 'Dotted', 'Dashed'], inline = "V0", group = g_VERTICAL)
v_width             = input.int(1, "", inline = "V0", group = g_VERTICAL)

use_v1              = input.bool(false, "", inline = "V1", group = g_VERTICAL)
v1                  = input.session("0000-0001", "", inline = "V1", group = g_VERTICAL)
v1_color            = input.color(color.black, "", inline = "V1", group = g_VERTICAL)

use_v2              = input.bool(false, "", inline = "V2", group = g_VERTICAL)
v2                  = input.session("0800-0801", "", inline = "V2", group = g_VERTICAL)
v2_color            = input.color(color.black, "", inline = "V2", group = g_VERTICAL)

use_v3              = input.bool(true, "", inline = "V3", group = g_VERTICAL)
v3                  = input.session("1200-1201", "", inline = "V3", group = g_VERTICAL)
v3_color            = input.color(color.black, "", inline = "V3", group = g_VERTICAL)

use_v4              = input.bool(true, "", inline = "V4", group = g_VERTICAL)
v4                  = input.session("1800-1801", "", inline = "V4", group = g_VERTICAL)
v4_color            = input.color(color.black, "", inline = "V4", group = g_VERTICAL)
// ---------------------------------------- Inputs --------------------------------------------------


// ---------------------------------------- Variables & Constants --------------------------------------------------
t_as = not na(time("", asia, gmt_tz))
t_lo = not na(time("", london, gmt_tz))
t_na = not na(time("", nyam, gmt_tz))
t_nl = not na(time("", nylu, gmt_tz))
t_np = not na(time("", nypm, gmt_tz))
t_co = not na(time("", cutoff, gmt_tz))

t_h1 = not na(time("", h1, gmt_tz))
t_h2 = not na(time("", h2, gmt_tz))
t_h3 = not na(time("", h3, gmt_tz))
t_h4 = not na(time("", h4, gmt_tz))

t_v1 = not na(time("", v1, gmt_tz))
t_v2 = not na(time("", v2, gmt_tz))
t_v3 = not na(time("", v3, gmt_tz))
t_v4 = not na(time("", v4, gmt_tz))

var line as_hi_line = na
var line as_lo_line = na
var line lo_hi_line = na
var line lo_lo_line = na
var line na_hi_line = na
var line na_lo_line = na
var line nl_hi_line = na
var line nl_lo_line = na
var line np_hi_line = na
var line np_lo_line = na

var line h1_line = na
var line h2_line = na
var line h3_line = na
var line h4_line = na

var line v1_line = na
var line v2_line = na
var line v3_line = na
var line v4_line = na

var label h1_label = na
var label h2_label = na
var label h3_label = na
var label h4_label = na

var label as_hi_label = na
var label as_lo_label = na
var label lo_hi_label = na
var label lo_lo_label = na
var label na_hi_label = na
var label na_lo_label = na
var label nl_hi_label = na
var label nl_lo_label = na
var label np_hi_label = na
var label np_lo_label = na

var box as_box = na
var box lo_box = na
var box na_box = na
var box nl_box = na
var box np_box = na

transparent = #ffffff00
// ---------------------------------------- Variables & Constants --------------------------------------------------


// ---------------------------------------- Functions --------------------------------------------------
get_label_size(_size) =>
    result = switch _size
        'Tiny' => size.tiny
        'Small' => size.small
        'Normal' => size.normal
        'Large' => size.large
        'Huge' => size.huge
        'Auto' => size.auto
    result

get_line_type(_style) =>
    result = switch _style
        'Solid' => line.style_solid
        'Dotted' => line.style_dotted
        'Dashed' => line.style_dashed
    result

get_box_color(_color, _transparency) =>
    result = color.new(_color, _transparency)
    
adjust(_hline, _lline, _hlabel, _llabel, _ulabel, _box) =>
    _hline.set_x2(bar_index)
    _lline.set_x2(bar_index)
    _box.set_right(bar_index)

    if high > _hline.get_y1()
        _hline.set_xy1(bar_index, high)
        _hline.set_y2(high)
        _box.set_top(high)

        _hlabel.set_x(bar_index)
        _hlabel.set_y(high)
    if low < _lline.get_y1()
        _lline.set_xy1(bar_index, low)
        _lline.set_y2(low)
        _box.set_bottom(low)

        _llabel.set_x(bar_index)
        _llabel.set_y(low)

check_high(_line) =>
    result = false
    _line.set_x2(bar_index)
    if high > _line.get_y1() or (use_cutoff ? t_co : false)
        result := true
    result
    
check_low(_line) =>
    result = false
    _line.set_x2(bar_index)
    if low < _line.get_y1() or (use_cutoff ? t_co : false)
        result := true
    result
    
check_open(_line, _label) =>
    result = false
    _line.set_x2(bar_index)
    _label.set_x(bar_index)
    if (use_cutoff ? t_co : false)
        result := true
    result
// ---------------------------------------- Functions --------------------------------------------------


// ---------------------------------------- Core Logic --------------------------------------------------
s_style := get_line_type(s_style)
h_style := get_line_type(h_style)
v_style := get_line_type(v_style)

lb_size := get_label_size(lb_size)

var color as_box_color = get_box_color(as_color, box_transparency)
var color lo_box_color = get_box_color(lo_color, box_transparency)
var color na_box_color = get_box_color(na_color, box_transparency)
var color nl_box_color = get_box_color(nl_color, box_transparency)
var color np_box_color = get_box_color(np_color, box_transparency)

var color as_text_color = get_box_color(as_color, text_transparency)
var color lo_text_color = get_box_color(lo_color, text_transparency)
var color na_text_color = get_box_color(na_color, text_transparency)
var color nl_text_color = get_box_color(nl_color, text_transparency)
var color np_text_color = get_box_color(np_color, text_transparency)

if timeframe.in_seconds("") <= timeframe.in_seconds(tf_limit)
    // Asia
    if use_asia
        if t_as and not t_as[1]
            as_hi_line := line.new(bar_index, high, bar_index, high, style = s_style, color = as_color, width = s_width)
            as_lo_line := line.new(bar_index, low, bar_index, low, style = s_style, color = as_color, width = s_width)

            if show_kz
                as_box := box.new(bar_index, high, bar_index, low, border_color = as_box_color, bgcolor = as_box_color, text = show_kz_text ? asia_text : na, text_color = as_text_color)

            if as_label
                as_hi_label := label.new(bar_index, high, ash_str, color = transparent, textcolor = lb_color, style = label.style_label_down, size = lb_size)
                as_lo_label := label.new(bar_index, low, asl_str, color = transparent, textcolor = lb_color, style = label.style_label_up, size = lb_size)
        else if t_as
            adjust(as_hi_line, as_lo_line, as_hi_label, as_lo_label, as_label, as_box)
        else if not t_as
            if check_high(as_hi_line)
                as_hi_line := na

            if check_low(as_lo_line)
                as_lo_line := na
        
    // London
    if use_london
        if t_lo and not t_lo[1]
            lo_hi_line := line.new(bar_index, high, bar_index, high, style = s_style, color = lo_color, width = s_width)
            lo_lo_line := line.new(bar_index, low, bar_index, low, style = s_style, color = lo_color, width = s_width)

            if show_kz
                lo_box := box.new(bar_index, high, bar_index, low, border_color = lo_box_color, bgcolor = lo_box_color, text = show_kz_text ? london_text : na, text_color = lo_text_color)

            if lo_label
                lo_hi_label := label.new(bar_index, high, loh_str, color = transparent, textcolor = lb_color, style = label.style_label_down, size = lb_size)
                lo_lo_label := label.new(bar_index, low, lol_str, color = transparent, textcolor = lb_color, style = label.style_label_up, size = lb_size)
        else if t_lo
            adjust(lo_hi_line, lo_lo_line, lo_hi_label, lo_lo_label, lo_label, lo_box)
        else if not t_lo
            if check_high(lo_hi_line)
                lo_hi_line := na

            if check_low(lo_lo_line)
                lo_lo_line := na
                        
    // NY AM
    if use_nyam
        if t_na and not t_na[1]
            na_hi_line := line.new(bar_index, high, bar_index, high, style = s_style, color = na_color, width = s_width)
            na_lo_line := line.new(bar_index, low, bar_index, low, style = s_style, color = na_color, width = s_width)

            if show_kz
                na_box := box.new(bar_index, high, bar_index, low, border_color = na_box_color, bgcolor = na_box_color, text = show_kz_text ? nyam_text : na, text_color = na_text_color)

            if na_label
                na_hi_label := label.new(bar_index, high, nah_str, color = transparent, textcolor = lb_color, style = label.style_label_down, size = lb_size)
                na_lo_label := label.new(bar_index, low, nal_str, color = transparent, textcolor = lb_color, style = label.style_label_up, size = lb_size)
        else if t_na
            adjust(na_hi_line, na_lo_line, na_hi_label, na_lo_label, na_label, na_box)
        else if not t_na
            if check_high(na_hi_line)
                na_hi_line := na

            if check_low(na_lo_line)
                na_lo_line := na
                        
    // NY Lunch
    if use_nylu
        if t_nl and not t_nl[1]
            nl_hi_line := line.new(bar_index, high, bar_index, high, style = s_style, color = nl_color, width = s_width)
            nl_lo_line := line.new(bar_index, low, bar_index, low, style = s_style, color = nl_color, width = s_width)

            if show_kz
                nl_box := box.new(bar_index, high, bar_index, low, border_color = nl_box_color, bgcolor = nl_box_color, text = show_kz_text ? nylu_text : na, text_color = nl_text_color)

            if nl_label
                nl_hi_label := label.new(bar_index, high, nlh_str, color = transparent, textcolor = lb_color, style = label.style_label_down, size = lb_size)
                nl_lo_label := label.new(bar_index, low, nll_str, color = transparent, textcolor = lb_color, style = label.style_label_up, size = lb_size)
        else if t_nl
            adjust(nl_hi_line, nl_lo_line, nl_hi_label, nl_lo_label, nl_label, nl_box)
        else if not t_nl
            if check_high(nl_hi_line)
                nl_hi_line := na

            if check_low(nl_lo_line)
                nl_lo_line := na
                        
    // NY PM
    if use_nypm
        if t_np and not t_np[1]
            np_hi_line := line.new(bar_index, high, bar_index, high, style = s_style, color = np_color, width = s_width)
            np_lo_line := line.new(bar_index, low, bar_index, low, style = s_style, color = np_color, width = s_width)

            if show_kz
                np_box := box.new(bar_index, high, bar_index, low, border_color = np_box_color, bgcolor = np_box_color, text = show_kz_text ? nypm_text : na, text_color = np_text_color)

            if np_label
                np_hi_label := label.new(bar_index, high, nph_str, color = transparent, textcolor = lb_color, style = label.style_label_down, size = lb_size)
                np_lo_label := label.new(bar_index, low, npl_str, color = transparent, textcolor = lb_color, style = label.style_label_up, size = lb_size)
        else if t_np
            adjust(np_hi_line, np_lo_line, np_hi_label, np_lo_label, np_label, np_box)
        else if not t_np
            if check_high(np_hi_line)
                np_hi_line := na

            if check_low(np_lo_line)
                np_lo_line := na
                
    // Vertical Lines
    if use_v1
        if t_v1 and not t_v1[1]
            v1_line := line.new(bar_index, high, bar_index, low, style = v_style, width = v_width, extend = extend.both, color = v1_color)
    if use_v2
        if t_v2 and not t_v2[1]
            v2_line := line.new(bar_index, high, bar_index, low, style = v_style, width = v_width, extend = extend.both, color = v2_color)
    if use_v3
        if t_v3 and not t_v3[1]
            v3_line := line.new(bar_index, high, bar_index, low, style = v_style, width = v_width, extend = extend.both, color = v3_color)
    if use_v4
        if t_v4 and not t_v4[1]
            v4_line := line.new(bar_index, high, bar_index, low, style = v_style, width = v_width, extend = extend.both, color = v4_color)

    // Horizontal Lines
    if use_h1
        if t_h1 and not t_h1[1]
            h1_line := line.new(bar_index, open, bar_index, open, style = h_style, width = h_width, color = h1_color)
            h1_label := label.new(bar_index, open, h1_text, style = label.style_label_left, color = transparent, textcolor = lb_color, size = lb_size)
        else if not t_h1
            if check_open(h1_line, h1_label)
                h1_line := na        
                h1_label := na
            else
                h1_label.set_x(bar_index)
                
    if use_h2
        if t_h2 and not t_h2[1]
            h2_line := line.new(bar_index, open, bar_index, open, style = h_style, width = h_width, color = h2_color)
            h2_label := label.new(bar_index, open, h2_text, style = label.style_label_left, color = transparent, textcolor = lb_color, size = lb_size)
        else if not t_h2
            if check_open(h2_line, h2_label)
                h2_line := na        
                h2_label := na
            else
                h2_label.set_x(bar_index)
                
    if use_h3
        if t_h3 and not t_h3[1]
            h3_line := line.new(bar_index, open, bar_index, open, style = h_style, width = h_width, color = h3_color)
            h3_label := label.new(bar_index, open, h3_text, style = label.style_label_left, color = transparent, textcolor = lb_color, size = lb_size)
        else if not t_h3
            if check_open(h3_line, h3_label)
                h3_line := na        
                h3_label := na
            else
                h3_label.set_x(bar_index)
                
    if use_h4
        if t_h4 and not t_h4[1]
            h4_line := line.new(bar_index, open, bar_index, open, style = h_style, width = h_width, color = h4_color)
            h4_label := label.new(bar_index, open, h4_text, style = label.style_label_left, color = transparent, textcolor = lb_color, size = lb_size)
        else if not t_h4
            if check_open(h4_line, h4_label)
                h4_line := na        
                h4_label := na
            else
                h4_label.set_x(bar_index)
// ---------------------------------------- Core Logic --------------------------------------------------
